Creating a react app
	* create react APP(CRA), Provided by react team
	* Vite, faster, and smaller bundle size


1- Installing vite
	npm create vite@4.1.0 or vite@latest
2- Create the project 
	Specify the project name
	Specify the framework
	Specify the variant

3- Run these commands
	
	cd hello_react
  	npm install
  	npm run dev

Note: *.ts file repersent plain type script files
		*.tsx file repersent react component file

4- React using pascal casing for funcation naming

Note: How html code converted into rect
	https://babeljs.io/repl



How recat workd 

	React will create virtual dom, light weight in memory component tree

		When react component change, react will update the particular node in virtual dom, then it will compare current version of virtual dom and previouse version of virtual dom

	React dom: will render component tree

		ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
			<React.StrictMode>
				<App />
			</Rect.StrictMode>,
		)

		In mobile app component tree render will differently, we need to use react native library

React is a java script library for building user interfaces.

Library															Framework
-------															----------
	A tool that provides specific functionality.					A set of tools and guidelines for building the apps.



React 
-----
Building UI components
Routing 
Http
Managing app state
Form validation


Install Bootstrap
--------------
https://getbootstrap.com/
npm i bootstrap@5.3.0

Update the boot strap css path in main.ts file
import 'bootstrap/dist/css/bootstrap.css'


Building components
-----------------

When copying the components from javas script, esnure 'class' field should change 'className'

Example : <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
    </ul>

    // Sample component
    function ListGroup() {
    return (
        <ul className="list-group">
            <li className="list-group-item">An item</li>
            <li className="list-group-item">A second item</li>
        </ul>
    );
    }
Wrapping the components
---------------------
    <div>
      <h1>Sample List</h1>
      <ul className="list-group">
        <li className="list-group-item">An item</li>
        <li className="list-group-item">A second item</li>
      </ul>
    </div>
In the above exmple with help of div, we are wrapping the mutliple components,


Fragments
    Wrapping the children in to single group, in the above example we are using one extra component for grouping. With Fragment we can avoid exra component

     <Fragment>
      <h1>Sample List</h1>
      <ul className="list-group">
        <li className="list-group-item">An item</li>
        <li className="list-group-item">A second item</li>
      </ul>
    </Fragment>


the same effect we can achieve with empty <>, here react will take care adding the fragmnet tag

 <>
      <h1>Sample List</h1>
      <ul className="list-group">
        <li className="list-group-item">An item</li>
        <li className="list-group-item">A second item</li>
      </ul>
    </>

The == operator performs a loose equality comparison that performs type coercion if necessary to make the comparison possible.

The === operator, on the other hand, performs a strict equality comparison that does not perform type coercion and requires the operands to have the same type (as well as the same value).
const a = 10
const b = true
    a == b => false
    a===b => false
const c = 1
    a == c => true
    a === c => false

